name: CI Workflow

on:
  push:
    branches:
      - dev
      - feat/combine_workflow
  pull_request:
    branches:
      - dev
      - main
  workflow_dispatch:  #keep manual run in case

jobs:
  # Python Linting
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: ./api

      - name: Run linter
        run: flake8 ./api

  # Python unit tests
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: ./api

      - name: Run tests
        run: pytest
        working-directory: ./api
  
  # Build Docker Image and publish to repo
  build:      
    needs: test      

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with: 
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    - name: Build the Docker image
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: "{{defaultContext}}:api"
        push: true
        tags: ${{ steps.meta.outputs.tags }}
  
  # Deploy terraform infrastructure
  deploy:
    needs: [test, build]
    if: github.event_name == 'push'

    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      TF_LOG: INFO #for getting logs in case of error
      TF_INPUT: false #disables user inputs

    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure

    steps: 
      - name: Checkout
        uses: actions/checkout@v4

      - name: 'Azure Login'
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Terraform init
        id: init
        run: |
          terraform init \
          -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
          -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
          -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
          -backend-config="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" 
        #giving backend config to access Azure State storage 
      
      - name: Terraform Format
        run: terraform fmt -check #checks formatting

      - name: Terraform Validate
        # Run even if formatting fails
        if: success() || failure()
        run: terraform validate -no-color #checks syntax

        #Plan section
      - name: Generate and Show Plan
        id: plan
        if: success() || failure()
        run: |
          echo "Terraform Plan Output:"
          echo "-------------------"
          terraform plan -var="subscription_id"=${{ secrets.AZURE_SUBSCRIPTION_ID }} -var="otel_exporter_otlp_headers=${{ secrets.OTEL_EXPORTER_OTLP_HEADERS }}" -no-color -out=build.tfplan

        #Apply section
      - name: Terraform Apply
        id: apply
        continue-on-error: true
        if: steps.plan.outcome == 'success'
        run: terraform apply -auto-approve -input=false -no-color build.tfplan